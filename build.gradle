plugins {
    id 'java'
    id 'application'
    id 'distribution'
}

mainClassName = "${mainclass}"
group = "${group}"
version = "${versionMajor}." + "${versionMinor}." + getBuildNumber()

configurations {
    compile
}

repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.romvoid.dev' }
}

dependencies {

    compile ('net.dv8tion:JDA:4.2.0_182'){
        transitive = true
        exclude module: 'opus-java'
    }
    
    implementation 'com.google.code.gson:gson:2.8.6'
    compile 'net.rom:ReadOnlyCfg:2.0.0'
    implementation 'org.apache.commons:commons-lang3:3.6'
	implementation group: 'commons-io', name: 'commons-io', version: '2.7'
	compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile group: 'club.minnced', name: 'discord-webhooks', version: '0.3.2'
    implementation group: 'org.codehaus.groovy', name: 'groovy-jsr223', version: '2.5.3'
    compile 'net.rom.lib:utils:0.0.1'

}

jar {
	archiveName = "Crypto-" + project.version + ".jar"
    configurations.compile.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
    manifest {
        attributes(
                'Main-Class': mainClassName
        )
    }
}

tasks.withType(Jar) {
	destinationDir = file("$rootDir/run/$version")
}

task copyFiles{
		copy{
			from ("$rootDir"){
				include 'run.bat'
			}
			into "$rootDir/run/$version"
			expand 'version':project.version
		}
}


String getBuildNumber() {
	def versionFile = file('version.properties')
	if (versionFile.canRead()) {
		Properties versionProps = new Properties()
		versionProps.load(new FileInputStream(versionFile))
		return versionProps['build_num'].toString()
	}
	return "1"
}

task incrementBuild {
	doFirst {
		def versionFile = file('version.properties')
		if (versionFile.canRead()) {
			Properties versionProps = new Properties()
			versionProps.load(new FileInputStream(versionFile))
			def num = versionProps['build_num'].toInteger() + 1
			println("incrementing BuildNumber to: " + num)
			versionProps['build_num'] = num.toString()
			versionProps.store(versionFile.newWriter(), null)
		} else {
			println("version.properties file not found! Ignoring.")
		}
	}
}

boolean getBooleanProperty(final String property) {
	if (project.hasProperty(property)) {
		return ((String) project.findProperty(property)).toBoolean()
	} else {
		return false
	}
}

build.finalizedBy (incrementBuild) // only increment on successful builds